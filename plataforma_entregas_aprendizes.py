import streamlit as st
import pandas as pd
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime, date
import re
import string

st.set_page_config(page_title="Controle de Entrega de Trabalhos - APRENDIZES", page_icon="üìò", layout="wide")

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_dict(st.secrets["gcp_service_account"], scope)
client = gspread.authorize(creds)

SHEET_ID = "1YnLFqXtLq95nV2gT6AU_5WTdfkk88cbWyL8e_duj0_Y"
sheet = client.open_by_key(SHEET_ID).sheet1

COLS = ["Aprendiz", "Atividade", "Entregue", "Data Inicia√ß√£o"]

ATIVIDADES_PADRAO = [
    "Minha Inicia√ß√£o", "1¬™ Instru√ß√£o", "2¬™ Instru√ß√£o", "3¬™ Instru√ß√£o", "4¬™ Instru√ß√£o",
    "5¬™ Instru√ß√£o", "6¬™ Instru√ß√£o", "7¬™ Instru√ß√£o", "O Livro da Lei", "A Coluna Booz",
    "O Templo de Salom√£o", "A Pedra Bruta", "O Avental de Aprendiz", "O Bode na Ma√ßonaria",
    "A Cadeia de Uni√£o", "Question√°rio de Aprendiz"
]

def _to_bool(v):
    if isinstance(v, bool):
        return v
    if v is None or (isinstance(v, float) and pd.isna(v)):
        return False
    if isinstance(v, (int, float)):
        return v != 0
    if isinstance(v, str):
        s = v.strip().lower()
        if s in ("true", "1", "yes", "y", "sim", "verdadeiro"):
            return True
        if s in ("false", "0", "no", "n", "n√£o", "nao", "falso", ""):
            return False
    return False

def uppercase_nome(nome: str) -> str:
    """Converte para letras mai√∫sculas, removendo espa√ßos extras."""
    if not isinstance(nome, str):
        return ""
    return nome.strip().upper()

RE_DDMMYYYY = re.compile(r"^\s*(\d{2})/(\d{2})/(\d{4})\s*$")

def parse_ddmmyyyy(s: str):
    if not isinstance(s, str):
        return None
    m = RE_DDMMYYYY.match(s)
    if not m:
        return None
    try:
        d, mth, y = map(int, m.groups())
        return date(y, mth, d)
    except ValueError:
        return None

def format_ddmmyyyy(d: date) -> str:
    if pd.isna(d) or d is None:
        return ""
    return d.strftime("%d/%m/%Y")

def anos_meses_desde(d: date, hoje: date = None) -> str:
    if d is None or pd.isna(d):
        return "‚Äî"
    if hoje is None:
        hoje = date.today()
    if d > hoje:
        return "‚Äî"
    months = (hoje.year - d.year) * 12 + (hoje.month - d.month)
    if hoje.day < d.day:
        months -= 1
    anos = months // 12
    meses = months % 12
    a_txt = f"{anos} ano" if anos == 1 else f"{anos} anos"
    m_txt = f"{meses} m√™s" if meses == 1 else f"{meses} meses"
    return f"{a_txt} e {m_txt}"

def coerce_to_date_from_gs(v):
    if v is None or (isinstance(v, float) and pd.isna(v)) or (isinstance(v, str) and v.strip() == ""):
        return None
    if isinstance(v, (int, float)):
        base = pd.to_datetime("1899-12-30")
        dt = base + pd.to_timedelta(int(v), unit="D")
        return dt.date()
    if isinstance(v, str):
        d = parse_ddmmyyyy(v)
        if d:
            return d
        try:
            return pd.to_datetime(v, dayfirst=True).date()
        except Exception:
            return None
    return None

@st.cache_data(show_spinner=False)
def carregar_dados_google():
    data = sheet.get_all_records(value_render_option='UNFORMATTED_VALUE')
    if data:
        df = pd.DataFrame(data)
        for c in COLS:
            if c not in df.columns:
                df[c] = None
        df["Aprendiz"] = df["Aprendiz"].astype(str)
        df["Atividade"] = df["Atividade"].astype(str)
        df["Entregue"] = df["Entregue"].map(_to_bool)
        df["Data Inicia√ß√£o"] = df["Data Inicia√ß√£o"].apply(coerce_to_date_from_gs)
        return df[COLS]
    return pd.DataFrame(columns=COLS)

def salvar_dados_google(df: pd.DataFrame):
    df = df.copy()
    df["Aprendiz"] = df["Aprendiz"].fillna("")
    df["Atividade"] = df["Atividade"].fillna("")
    df["Entregue"] = df["Entregue"].map(lambda x: True if x is True else False)
    df["Data Inicia√ß√£o"] = df["Data Inicia√ß√£o"].apply(lambda d: format_ddmmyyyy(d) if isinstance(d, (date, datetime)) else (d if isinstance(d, str) else ""))
    sheet.clear()
    sheet.update(
        [df.columns.tolist()] + df.values.tolist(),
        value_input_option='USER_ENTERED'
    )

def inicializa_planilha_se_vazia():
    df = carregar_dados_google()
    if df.empty:
        aprendizes = [""]
        df = pd.DataFrame(
            [(a, at, False, None) for a in aprendizes for at in ATIVIDADES_PADRAO],
            columns=COLS
        )
        salvar_dados_google(df)
        carregar_dados_google.clear()
        return carregar_dados_google()
    return df

if "df" not in st.session_state:
    st.session_state.df = inicializa_planilha_se_vazia()
if "ultima_atualizacao" not in st.session_state:
    st.session_state.ultima_atualizacao = datetime.now()

col_tit, col_btn = st.columns([0.8, 0.2])
with col_tit:
    st.title("üìò Controle de Entrega de Trabalhos - APRENDIZES - A.R.L.S. Tropeiros de Sorocaba n¬∫824")
with col_btn:
    if st.button("üîÑ Atualizar do Google Sheets", use_container_width=True, help="Recarrega os dados diretamente da planilha"):
        carregar_dados_google.clear()
        st.session_state.df = carregar_dados_google()
        st.session_state.ultima_atualizacao = datetime.now()
        st.success("Dados atualizados a partir do Google Sheets.")

st.caption(f"√öltima atualiza√ß√£o local: {st.session_state.ultima_atualizacao.strftime('%d/%m/%Y %H:%M:%S')}")

df = st.session_state.df.copy()

st.subheader("Filtros")
aprendizes_lista = sorted([a for a in df["Aprendiz"].unique() if a is not None])
atividades_unicas = list(dict.fromkeys(df["Atividade"].dropna().tolist()))
atividades_ordenadas = [a for a in ATIVIDADES_PADRAO if a in atividades_unicas] + [a for a in atividades_unicas if a not in ATIVIDADES_PADRAO]

filtro_aprendiz = st.selectbox("Filtrar por Aprendiz", ["Todos"] + aprendizes_lista, index=0)
filtro_atividade = st.selectbox("Filtrar por Atividade", ["Todas"] + atividades_ordenadas, index=0)

df_filtrado = df.copy()
if filtro_aprendiz != "Todos":
    df_filtrado = df_filtrado[df_filtrado["Aprendiz"] == filtro_aprendiz]
if filtro_atividade != "Todas":
    df_filtrado = df_filtrado[df_filtrado["Atividade"] == filtro_atividade]

if df_filtrado.empty:
    st.info("Nenhum registro encontrado com os filtros aplicados.")
else:
    atividades_unicas_filtrado = list(dict.fromkeys(df_filtrado["Atividade"].dropna().tolist()))
    atividades_ordenadas_filtrado = [a for a in ATIVIDADES_PADRAO if a in atividades_unicas_filtrado] + [a for a in atividades_unicas_filtrado if a not in ATIVIDADES_PADRAO]

    df_ord = df_filtrado.copy()
    df_ord["Atividade"] = pd.Categorical(df_ord["Atividade"], categories=atividades_ordenadas_filtrado, ordered=True)

    df_display = (
        df_ord
        .pivot(index="Aprendiz", columns="Atividade", values="Entregue")
        .reindex(columns=atividades_ordenadas_filtrado)
        .fillna(False)
        .sort_index(axis=0)
        .applymap(lambda x: "üü¢" if x is True else "üî¥")
    )

    datas_por_aprendiz = (
        df_ord[['Aprendiz', 'Data Inicia√ß√£o']]
        .drop_duplicates()
        .sort_values('Data Inicia√ß√£o')
        .groupby('Aprendiz', as_index=True)['Data Inicia√ß√£o']
        .apply(lambda s: next((d for d in s if d is not None), None))
    )

    data_fmt = datas_por_aprendiz.apply(lambda d: format_ddmmyyyy(d) if d else "‚Äî")
    tempo_fmt = datas_por_aprendiz.apply(lambda d: anos_meses_desde(d))

    df_display.insert(0, "Tempo desde Inicia√ß√£o", tempo_fmt.reindex(df_display.index).fillna("‚Äî"))
    df_display.insert(0, "Data de Inicia√ß√£o", data_fmt.reindex(df_display.index).fillna("‚Äî"))

    def destacar_linha_completa(valores):
        if all(v == "üü¢" for v in valores if v in ("üü¢", "üî¥")):
            return ["background-color: lightgreen; font-weight: bold"] * len(valores)
        return ["font-weight: bold"] * len(valores)

    styled_df = df_display.style.apply(destacar_linha_completa, axis=1)
    st.dataframe(styled_df, use_container_width=True)

st.sidebar.header("Gerenciar Aprendizes")

def _normalizar_input_novo_aprendiz():
    valor = st.session_state.get("novo_aprendiz_input", "")
    st.session_state["novo_aprendiz_input"] = uppercase_nome(valor)

novo_aprendiz = st.sidebar.text_input(
    "Adicionar novo aprendiz",
    key="novo_aprendiz_input",
    on_change=_normalizar_input_novo_aprendiz
)

novo_aprendiz_data_str = st.sidebar.text_input(
    "Data de inicia√ß√£o (dd/mm/aaaa)",
    placeholder="dd/mm/aaaa",
    key="novo_aprendiz_data_input",
    help="Digite no formato dd/mm/aaaa. Ex.: 05/03/2024"
)

if st.sidebar.button("Adicionar", key="botao_adicionar_aprendiz"):
    novo_aprendiz_norm = uppercase_nome(st.session_state.get("novo_aprendiz_input", ""))
    data_ok = parse_ddmmyyyy(st.session_state.get("novo_aprendiz_data_input", ""))

    if not novo_aprendiz_norm:
        st.sidebar.warning("Informe um nome v√°lido.")
    elif not data_ok:
        st.sidebar.warning("Informe uma data de inicia√ß√£o v√°lida no formato dd/mm/aaaa.")
    elif data_ok > date.today():
        st.sidebar.warning("A data de inicia√ß√£o n√£o pode ser futura.")
    else:
        nomes_existentes_norm = pd.Series(df["Aprendiz"].fillna("")).apply(uppercase_nome)
        if novo_aprendiz_norm in nomes_existentes_norm.values:
            st.sidebar.warning("Este aprendiz j√° existe.")
        else:
            atividades_unicas_all = list(dict.fromkeys(df["Atividade"].dropna().tolist()))
            atividades_existentes = [a for a in ATIVIDADES_PADRAO if a in atividades_unicas_all] + [a for a in atividades_unicas_all if a not in ATIVIDADES_PADRAO]
            if len(atividades_existentes) == 0:
                atividades_existentes = ATIVIDADES_PADRAO

            novos_registros = pd.DataFrame(
                [(novo_aprendiz_norm, at, False, data_ok) for at in atividades_existentes],
                columns=COLS
            )

            df = pd.concat([df, novos_registros], ignore_index=True)
            salvar_dados_google(df)
            st.session_state.df = df
            st.sidebar.success(f"{novo_aprendiz_norm} adicionado com inicia√ß√£o em {format_ddmmyyyy(data_ok)}!")

if len(aprendizes_lista) > 0:
    aprendiz_remover = st.sidebar.selectbox("Remover aprendiz", aprendizes_lista)
    if st.sidebar.button("Remover"):
        df = df[df["Aprendiz"] != aprendiz_remover]
        salvar_dados_google(df)
        st.session_state.df = df
        st.sidebar.warning(f"{aprendiz_remover} removido!")
else:
    st.sidebar.info("N√£o h√° aprendizes para remover.")

st.sidebar.header("Marcar Entregas")
if len(aprendizes_lista) > 0:
    aprendiz_sel = st.sidebar.selectbox("Selecionar Aprendiz", aprendizes_lista)
    atividades_sel = df[df["Aprendiz"] == aprendiz_sel]["Atividade"].tolist()

    alterou = False
    for at in atividades_sel:
        entregue_atual = bool(df[(df["Aprendiz"] == aprendiz_sel) & (df["Atividade"] == at)]["Entregue"].values[0])
        novo_valor = st.sidebar.checkbox(at, value=entregue_atual, key=f"{aprendiz_sel}_{at}")
        if novo_valor != entregue_atual:
            df.loc[(df["Aprendiz"] == aprendiz_sel) & (df["Atividade"] == at), "Entregue"] = novo_valor
            alterou = True

    if alterou:
        salvar_dados_google(df)
        st.session_state.df = df
        st.sidebar.success("Entregas atualizadas!")
else:
    st.sidebar.info("Cadastre um aprendiz para marcar entregas.")
